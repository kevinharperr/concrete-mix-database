# Generated by Django 5.2 on 2025-04-24 09:45

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Material',
            fields=[
                ('material_id', models.AutoField(primary_key=True, serialize=False)),
                ('subtype_code', models.CharField(blank=True, db_index=True, help_text='Specific type within class, e.g., CEM I, Fly Ash Class F', max_length=20, null=True)),
                ('specific_name', models.TextField(blank=True, help_text='Most specific name from source, e.g., CEM I 52.5 R, OPC-32.5, Tap Water', null=True)),
                ('manufacturer', models.TextField(blank=True, null=True)),
                ('country_of_origin', models.CharField(blank=True, max_length=60, null=True)),
                ('date_added', models.DateField(auto_now_add=True, null=True)),
                ('source_dataset', models.CharField(blank=True, db_index=True, help_text='Original dataset identifier (e.g., DS1, DS6)', max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Material',
                'verbose_name_plural': 'Materials',
                'db_table': 'material',
            },
        ),
        migrations.CreateModel(
            name='BibliographicReference',
            fields=[
                ('reference_id', models.AutoField(primary_key=True, serialize=False)),
                ('author', models.TextField(blank=True, null=True)),
                ('title', models.TextField(blank=True, null=True)),
                ('publication', models.TextField(blank=True, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('doi', models.CharField(blank=True, max_length=100, null=True)),
                ('citation_text', models.TextField(blank=True, help_text='Original citation string if available', null=True)),
            ],
            options={
                'verbose_name': 'Bibliographic Reference',
                'verbose_name_plural': 'Bibliographic References',
                'db_table': 'bibliographic_reference',
            },
        ),
        migrations.CreateModel(
            name='ConcreteMix',
            fields=[
                ('mix_id', models.AutoField(primary_key=True, serialize=False)),
                ('mix_code', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('date_created', models.DateField(blank=True, null=True)),
                ('region_country', models.CharField(blank=True, max_length=60, null=True)),
                ('strength_class', models.CharField(blank=True, help_text='e.g., C30/37', max_length=10, null=True)),
                ('target_slump_mm', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('w_c_ratio', models.DecimalField(blank=True, decimal_places=3, help_text='Water/(Cement) ratio', max_digits=6, null=True)),
                ('w_b_ratio', models.DecimalField(blank=True, decimal_places=3, help_text='Water/(Binder=Cement+SCM) ratio', max_digits=6, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Concrete Mix',
                'verbose_name_plural': 'Concrete Mixes',
                'db_table': 'concrete_mix',
            },
        ),
        migrations.CreateModel(
            name='CuringRegime',
            fields=[
                ('curing_regime_id', models.AutoField(primary_key=True, serialize=False)),
                ('description', models.CharField(blank=True, help_text='e.g., Water bath 20C, Sealed 23C 50%RH', max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'Curing Regime',
                'verbose_name_plural': 'Curing Regimes',
                'db_table': 'curing_regime',
            },
        ),
        migrations.CreateModel(
            name='Dataset',
            fields=[
                ('dataset_id', models.AutoField(primary_key=True, serialize=False)),
                ('dataset_name', models.CharField(help_text='e.g., DS1, DS6', max_length=60, unique=True)),
                ('license', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Dataset',
                'verbose_name_plural': 'Datasets',
                'db_table': 'dataset',
            },
        ),
        migrations.CreateModel(
            name='MaterialClass',
            fields=[
                ('class_code', models.CharField(help_text='e.g., CEMENT, SCM, AGGR_C, AGGR_F', max_length=8, primary_key=True, serialize=False)),
                ('class_name', models.CharField(blank=True, max_length=60, null=True)),
            ],
            options={
                'verbose_name': 'Material Class',
                'verbose_name_plural': 'Material Classes',
                'db_table': 'material_class',
            },
        ),
        migrations.CreateModel(
            name='Standard',
            fields=[
                ('standard_id', models.AutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(help_text='e.g., EN 197-1, ASTM C150', max_length=30, unique=True)),
                ('title', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Standard',
                'verbose_name_plural': 'Standards',
                'db_table': 'standard',
            },
        ),
        migrations.CreateModel(
            name='UnitLookup',
            fields=[
                ('unit_id', models.AutoField(primary_key=True, serialize=False)),
                ('unit_symbol', models.CharField(help_text='e.g., kg/mÂ³, MPa, %', max_length=20, unique=True)),
                ('si_factor', models.DecimalField(blank=True, decimal_places=9, help_text='Factor to multiply by to get base SI unit (if applicable)', max_digits=15, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Unit',
                'verbose_name_plural': 'Units',
                'db_table': 'unit_lookup',
            },
        ),
        migrations.CreateModel(
            name='AdmixtureDetail',
            fields=[
                ('material', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='admixture_detail', serialize=False, to='cdb_app.material')),
                ('solid_content_pct', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('specific_gravity', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
                ('chloride_content_pct', models.DecimalField(blank=True, decimal_places=3, max_digits=6, null=True)),
            ],
            options={
                'verbose_name': 'Admixture Detail',
                'verbose_name_plural': 'Admixture Details',
                'db_table': 'admixture_detail',
            },
        ),
        migrations.CreateModel(
            name='AggregateConstituent',
            fields=[
                ('material', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='aggregate_constituent', serialize=False, to='cdb_app.material')),
                ('rc_pct', models.DecimalField(blank=True, decimal_places=2, help_text='Recycled Concrete', max_digits=6, null=True)),
                ('ru_pct', models.DecimalField(blank=True, decimal_places=2, help_text='Unbound Aggregate', max_digits=6, null=True)),
                ('ra_pct', models.DecimalField(blank=True, decimal_places=2, help_text='Bituminous Asphalt', max_digits=6, null=True)),
                ('rb_pct', models.DecimalField(blank=True, decimal_places=2, help_text='Brick', max_digits=6, null=True)),
                ('fl_pct', models.DecimalField(blank=True, decimal_places=2, help_text='Floating Lightweight', max_digits=6, null=True)),
                ('x_pct', models.DecimalField(blank=True, decimal_places=2, help_text='Other (Glass, etc.)', max_digits=6, null=True)),
                ('rg_pct', models.DecimalField(blank=True, decimal_places=2, help_text='Glass', max_digits=6, null=True)),
            ],
            options={
                'verbose_name': 'Aggregate Constituent',
                'verbose_name_plural': 'Aggregate Constituents',
                'db_table': 'aggregate_constituent',
            },
        ),
        migrations.CreateModel(
            name='AggregateDetail',
            fields=[
                ('material', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='aggregate_detail', serialize=False, to='cdb_app.material')),
                ('d_lower_mm', models.DecimalField(blank=True, decimal_places=2, help_text='Lower bound size', max_digits=8, null=True)),
                ('d_upper_mm', models.DecimalField(blank=True, decimal_places=2, help_text='Upper bound size (D)', max_digits=8, null=True)),
                ('bulk_density_kg_m3', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('water_absorption_pct', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('fineness_modulus', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
            ],
            options={
                'verbose_name': 'Aggregate Detail',
                'verbose_name_plural': 'Aggregate Details',
                'db_table': 'aggregate_detail',
            },
        ),
        migrations.CreateModel(
            name='CementDetail',
            fields=[
                ('material', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='cement_detail', serialize=False, to='cdb_app.material')),
                ('strength_class', models.CharField(blank=True, max_length=10, null=True)),
                ('clinker_pct', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
            ],
            options={
                'verbose_name': 'Cement Detail',
                'verbose_name_plural': 'Cement Details',
                'db_table': 'cement_detail',
            },
        ),
        migrations.CreateModel(
            name='FibreDetail',
            fields=[
                ('material', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='fibre_detail', serialize=False, to='cdb_app.material')),
                ('length_mm', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('diameter_mm', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True)),
                ('aspect_ratio', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('tensile_strength_mpa', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
            ],
            options={
                'verbose_name': 'Fibre Detail',
                'verbose_name_plural': 'Fibre Details',
                'db_table': 'fibre_detail',
            },
        ),
        migrations.CreateModel(
            name='ScmDetail',
            fields=[
                ('material', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='scm_detail', serialize=False, to='cdb_app.material')),
                ('scm_type_code', models.CharField(blank=True, help_text='e.g., F, N, SF, G', max_length=20, null=True)),
                ('loi_pct', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
            ],
            options={
                'verbose_name': 'SCM Detail',
                'verbose_name_plural': 'SCM Details',
                'db_table': 'scm_detail',
            },
        ),
        migrations.CreateModel(
            name='ConcreteMixReference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mix', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cdb_app.concretemix')),
                ('reference', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cdb_app.bibliographicreference')),
            ],
            options={
                'verbose_name': 'Mix Reference Link',
                'verbose_name_plural': 'Mix Reference Links',
                'db_table': 'concrete_mix_reference',
                'unique_together': {('mix', 'reference')},
            },
        ),
        migrations.AddField(
            model_name='concretemix',
            name='references',
            field=models.ManyToManyField(related_name='concrete_mixes', through='cdb_app.ConcreteMixReference', to='cdb_app.bibliographicreference'),
        ),
        migrations.AddField(
            model_name='concretemix',
            name='dataset',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='concrete_mixes', to='cdb_app.dataset'),
        ),
        migrations.AddField(
            model_name='material',
            name='material_class',
            field=models.ForeignKey(db_column='class_code', help_text='High-level material classification', on_delete=django.db.models.deletion.RESTRICT, related_name='materials', to='cdb_app.materialclass'),
        ),
        migrations.CreateModel(
            name='Specimen',
            fields=[
                ('specimen_id', models.AutoField(primary_key=True, serialize=False)),
                ('shape', models.CharField(blank=True, help_text='e.g., Cube, Cylinder, Prism', max_length=20, null=True)),
                ('nominal_length_mm', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('nominal_diameter_mm', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('mix', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='specimens', to='cdb_app.concretemix')),
            ],
            options={
                'verbose_name': 'Specimen',
                'verbose_name_plural': 'Specimens',
                'db_table': 'specimen',
            },
        ),
        migrations.CreateModel(
            name='StagingRaw',
            fields=[
                ('raw_id', models.AutoField(primary_key=True, serialize=False)),
                ('row_json', models.JSONField(blank=True, null=True)),
                ('ingest_ts', models.DateTimeField(auto_now_add=True, null=True)),
                ('dataset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cdb_app.dataset')),
            ],
            options={
                'verbose_name': 'Staging Raw Data',
                'verbose_name_plural': 'Staging Raw Data',
                'db_table': 'staging_raw',
            },
        ),
        migrations.AddField(
            model_name='material',
            name='standard',
            field=models.ForeignKey(blank=True, db_column='standard_ref', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='materials', to='cdb_app.standard'),
        ),
        migrations.CreateModel(
            name='TestMethod',
            fields=[
                ('test_method_id', models.AutoField(primary_key=True, serialize=False)),
                ('clause', models.CharField(blank=True, max_length=30, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('standard', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cdb_app.standard')),
            ],
            options={
                'verbose_name': 'Test Method',
                'verbose_name_plural': 'Test Methods',
                'db_table': 'test_method',
            },
        ),
        migrations.CreateModel(
            name='SustainabilityMetric',
            fields=[
                ('metric_id', models.AutoField(primary_key=True, serialize=False)),
                ('metric_code', models.CharField(blank=True, help_text='e.g., GWP, EmbodiedEnergy', max_length=15, null=True)),
                ('value_num', models.DecimalField(blank=True, decimal_places=4, max_digits=16, null=True)),
                ('method_ref', models.CharField(blank=True, help_text='Reference to calculation method or standard', max_length=30, null=True)),
                ('mix', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sustainability_metrics', to='cdb_app.concretemix')),
                ('unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cdb_app.unitlookup')),
            ],
            options={
                'verbose_name': 'Sustainability Metric',
                'verbose_name_plural': 'Sustainability Metrics',
                'db_table': 'sustainability_metric',
            },
        ),
        migrations.CreateModel(
            name='PropertyDictionary',
            fields=[
                ('property_name', models.CharField(help_text="Unique code/key for the property, e.g., 'cao_pct'", max_length=60, primary_key=True, serialize=False)),
                ('display_name', models.CharField(help_text="User-friendly name, e.g., 'CaO (%)'", max_length=120)),
                ('property_group', models.CharField(choices=[('chemical', 'Chemical Composition'), ('physical', 'Physical Properties'), ('mechanical', 'Mechanical Properties'), ('thermal', 'Thermal Properties')], help_text='Category of the property', max_length=30)),
                ('default_unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='cdb_app.unitlookup')),
            ],
            options={
                'verbose_name': 'Property Definition',
                'verbose_name_plural': 'Property Dictionary',
                'db_table': 'property_dictionary',
            },
        ),
        migrations.CreateModel(
            name='PerformanceResult',
            fields=[
                ('result_id', models.AutoField(primary_key=True, serialize=False)),
                ('category', models.CharField(choices=[('fresh', 'Fresh Concrete Properties'), ('hardened', 'Hardened Concrete Properties'), ('durability', 'Durability Properties')], db_index=True, max_length=15)),
                ('age_days', models.IntegerField(blank=True, db_index=True, null=True)),
                ('value_num', models.DecimalField(blank=True, decimal_places=4, max_digits=16, null=True)),
                ('test_conditions', models.TextField(blank=True, null=True)),
                ('curing_regime', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cdb_app.curingregime')),
                ('mix', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_results', to='cdb_app.concretemix')),
                ('specimen', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cdb_app.specimen')),
                ('test_method', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cdb_app.testmethod')),
                ('unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cdb_app.unitlookup')),
            ],
            options={
                'verbose_name': 'Performance Result',
                'verbose_name_plural': 'Performance Results',
                'db_table': 'performance_result',
            },
        ),
        migrations.CreateModel(
            name='MaterialProperty',
            fields=[
                ('property_id', models.AutoField(primary_key=True, serialize=False)),
                ('value_num', models.DecimalField(blank=True, decimal_places=4, max_digits=16, null=True)),
                ('test_date', models.DateField(blank=True, null=True)),
                ('material', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='cdb_app.material')),
                ('property_name', models.ForeignKey(db_column='property_name', on_delete=django.db.models.deletion.RESTRICT, related_name='material_values', to='cdb_app.propertydictionary')),
                ('test_method', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cdb_app.testmethod')),
                ('unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cdb_app.unitlookup')),
            ],
            options={
                'verbose_name': 'Material Property',
                'verbose_name_plural': 'Material Properties',
                'db_table': 'material_property',
            },
        ),
        migrations.CreateModel(
            name='ColumnMap',
            fields=[
                ('map_id', models.AutoField(primary_key=True, serialize=False)),
                ('source_column', models.CharField(max_length=128)),
                ('target_table', models.CharField(blank=True, max_length=64, null=True)),
                ('target_column', models.CharField(blank=True, max_length=64, null=True)),
                ('unit_hint', models.CharField(blank=True, max_length=20, null=True)),
                ('needs_conversion', models.BooleanField(blank=True, null=True)),
                ('dataset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cdb_app.dataset')),
            ],
            options={
                'verbose_name': 'Column Map',
                'verbose_name_plural': 'Column Maps',
                'db_table': 'column_map',
                'unique_together': {('dataset', 'source_column')},
            },
        ),
        migrations.CreateModel(
            name='MixComponent',
            fields=[
                ('component_id', models.AutoField(primary_key=True, serialize=False)),
                ('dosage_kg_m3', models.DecimalField(decimal_places=3, help_text='Dosage in kg per cubic meter', max_digits=10)),
                ('is_cementitious', models.BooleanField(blank=True, help_text='Flag if this component counts towards binder content (for W/B calc)', null=True)),
                ('material', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='mix_usages', to='cdb_app.material')),
                ('mix', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='components', to='cdb_app.concretemix')),
            ],
            options={
                'verbose_name': 'Mix Component',
                'verbose_name_plural': 'Mix Components',
                'db_table': 'mix_component',
                'unique_together': {('mix', 'material')},
            },
        ),
        migrations.AddIndex(
            model_name='material',
            index=models.Index(fields=['material_class', 'subtype_code'], name='material_class_c_c773fb_idx'),
        ),
        migrations.AddIndex(
            model_name='performanceresult',
            index=models.Index(fields=['mix', 'category', 'age_days'], name='performance_mix_id_43655b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='materialproperty',
            unique_together={('material', 'property_name')},
        ),
    ]
