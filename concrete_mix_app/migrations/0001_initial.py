# Generated by Django 5.2 on 2025-04-17 13:29

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Bibliographicreference',
            fields=[
                ('reference_id', models.AutoField(primary_key=True, serialize=False)),
                ('source_dataset', models.CharField(blank=True, max_length=50, null=True)),
                ('author', models.CharField(blank=True, max_length=255, null=True)),
                ('title', models.TextField(blank=True, null=True)),
                ('publication', models.CharField(blank=True, max_length=255, null=True)),
                ('year', models.IntegerField(blank=True, null=True)),
                ('doi', models.CharField(blank=True, max_length=100, null=True)),
                ('url', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Bibliographic Reference',
                'verbose_name_plural': 'Bibliographic References',
                'db_table': 'bibliographicreference',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Chemicalcomposition',
            fields=[
                ('composition_id', models.AutoField(primary_key=True, serialize=False)),
                ('sio2_pct', models.FloatField(blank=True, null=True)),
                ('al2o3_pct', models.FloatField(blank=True, null=True)),
                ('fe2o3_pct', models.FloatField(blank=True, null=True)),
                ('cao_pct', models.FloatField(blank=True, null=True)),
                ('mgo_pct', models.FloatField(blank=True, null=True)),
                ('so3_pct', models.FloatField(blank=True, null=True)),
                ('na2o_pct', models.FloatField(blank=True, null=True)),
                ('k2o_pct', models.FloatField(blank=True, null=True)),
                ('tio2_pct', models.FloatField(blank=True, null=True)),
                ('p2o5_pct', models.FloatField(blank=True, null=True)),
                ('loi_pct', models.FloatField(blank=True, null=True)),
                ('date_added', models.DateField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Chemical Composition',
                'verbose_name_plural': 'Chemical Compositions',
                'db_table': 'chemicalcomposition',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Concretemix',
            fields=[
                ('mix_id', models.AutoField(primary_key=True, serialize=False)),
                ('mix_code', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('date_created', models.DateField(blank=True, null=True)),
                ('source_dataset', models.CharField(blank=True, max_length=50, null=True)),
                ('region', models.CharField(blank=True, max_length=100, null=True)),
                ('target_strength_mpa', models.FloatField(blank=True, null=True)),
                ('target_workability_mm', models.FloatField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Concrete Mix',
                'verbose_name_plural': 'Concrete Mixes',
                'db_table': 'concretemix',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Datasetversion',
            fields=[
                ('version_id', models.AutoField(primary_key=True, serialize=False)),
                ('source_dataset', models.CharField(blank=True, max_length=50, null=True)),
                ('import_date', models.DateField(blank=True, null=True)),
                ('version_notes', models.TextField(blank=True, null=True)),
                ('row_count', models.IntegerField(blank=True, null=True)),
                ('has_material_properties', models.BooleanField(blank=True, null=True)),
                ('has_chemical_composition', models.BooleanField(blank=True, null=True)),
                ('has_performance_results', models.BooleanField(blank=True, null=True)),
                ('has_durability_results', models.BooleanField(blank=True, null=True)),
                ('has_sustainability_metrics', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Dataset Version',
                'verbose_name_plural': 'Dataset Versions',
                'db_table': 'datasetversion',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Durabilityresult',
            fields=[
                ('result_id', models.AutoField(primary_key=True, serialize=False)),
                ('test_type', models.CharField(blank=True, max_length=100, null=True)),
                ('test_age_days', models.IntegerField(blank=True, null=True)),
                ('test_value', models.FloatField(blank=True, null=True)),
                ('test_unit', models.CharField(blank=True, max_length=50, null=True)),
                ('test_conditions', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'Durability Result',
                'verbose_name_plural': 'Durability Results',
                'db_table': 'durabilityresult',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('material_id', models.AutoField(primary_key=True, serialize=False)),
                ('material_type', models.CharField(blank=True, max_length=50, null=True)),
                ('subtype', models.CharField(blank=True, max_length=50, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('manufacturer', models.CharField(blank=True, max_length=255, null=True)),
                ('standard_reference', models.CharField(blank=True, max_length=100, null=True)),
                ('date_added', models.DateField(blank=True, null=True)),
                ('source_dataset', models.CharField(blank=True, max_length=50, null=True)),
            ],
            options={
                'verbose_name': 'Material',
                'verbose_name_plural': 'Materials',
                'db_table': 'material',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Materialproperty',
            fields=[
                ('property_id', models.AutoField(primary_key=True, serialize=False)),
                ('property_name', models.CharField(blank=True, max_length=100, null=True)),
                ('property_value', models.FloatField(blank=True, null=True)),
                ('property_text', models.TextField(blank=True, null=True)),
                ('property_unit', models.CharField(blank=True, max_length=50, null=True)),
                ('test_method', models.CharField(blank=True, max_length=100, null=True)),
                ('date_measured', models.DateField(blank=True, null=True)),
                ('rca_bulk_density', models.FloatField(blank=True, null=True)),
                ('rca_water_absorption', models.FloatField(blank=True, null=True)),
                ('rca_size', models.FloatField(blank=True, null=True)),
                ('nca_bulk_density', models.FloatField(blank=True, null=True)),
                ('nca_water_absorption', models.FloatField(blank=True, null=True)),
                ('nca_size', models.FloatField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Material Property',
                'verbose_name_plural': 'Material Properties',
                'db_table': 'materialproperty',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Mixcomposition',
            fields=[
                ('composition_id', models.AutoField(primary_key=True, serialize=False)),
                ('quantity_kg_m3', models.FloatField(blank=True, null=True)),
                ('percentage_by_weight', models.FloatField(blank=True, null=True)),
                ('replacement_percentage', models.FloatField(blank=True, null=True)),
                ('w_c_ratio', models.FloatField(blank=True, null=True)),
                ('w_b_ratio', models.FloatField(blank=True, null=True)),
                ('is_wb_ratio', models.BooleanField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Mix Composition',
                'verbose_name_plural': 'Mix Compositions',
                'db_table': 'mixcomposition',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Performanceresult',
            fields=[
                ('result_id', models.AutoField(primary_key=True, serialize=False)),
                ('test_type', models.CharField(blank=True, max_length=100, null=True)),
                ('test_age_days', models.IntegerField(blank=True, null=True)),
                ('test_value', models.FloatField(blank=True, null=True)),
                ('test_unit', models.CharField(blank=True, max_length=50, null=True)),
                ('test_conditions', models.CharField(blank=True, max_length=100, null=True)),
                ('curing_regime', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'Performance Result',
                'verbose_name_plural': 'Performance Results',
                'db_table': 'performanceresult',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Specimen',
            fields=[
                ('specimen_id', models.AutoField(primary_key=True, serialize=False)),
                ('specimen_type', models.CharField(blank=True, max_length=100, null=True)),
                ('dimension_mm', models.CharField(blank=True, max_length=100, null=True)),
                ('shape', models.CharField(blank=True, max_length=50, null=True)),
                ('curing_regime', models.CharField(blank=True, max_length=100, null=True)),
                ('standard_reference', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name': 'Specimen',
                'verbose_name_plural': 'Specimens',
                'db_table': 'specimen',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Sustainabilitymetrics',
            fields=[
                ('metric_id', models.AutoField(primary_key=True, serialize=False)),
                ('co2_footprint_kg_per_m3', models.FloatField(blank=True, null=True)),
                ('cost_per_m3', models.FloatField(blank=True, null=True)),
                ('clinker_factor', models.FloatField(blank=True, null=True)),
                ('scm_percentage', models.FloatField(blank=True, null=True)),
                ('recyclability_index', models.FloatField(blank=True, null=True)),
                ('embodied_energy_mj_per_m3', models.FloatField(blank=True, null=True)),
                ('global_warming_potential_kg_co2e', models.FloatField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Sustainability Metric',
                'verbose_name_plural': 'Sustainability Metrics',
                'db_table': 'sustainabilitymetrics',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='UserObjectTracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_type', models.CharField(max_length=50)),
                ('object_id', models.IntegerField()),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Object Tracking',
                'verbose_name_plural': 'User Object Tracking',
                'db_table': 'user_object_tracking',
                'managed': True,
                'indexes': [models.Index(fields=['content_type', 'object_id'], name='user_object_content_7dffa9_idx'), models.Index(fields=['created_by'], name='user_object_created_ed0372_idx')],
                'unique_together': {('content_type', 'object_id')},
            },
        ),
    ]
